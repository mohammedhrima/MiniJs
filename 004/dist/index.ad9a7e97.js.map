{"mappings":"AAIA,MAAMI,gBAAgB;IAClBC,eAAeA,CAACF,KAAKG,OAAO,GAAGC;QAC3B,MAAMC,UAAU;YACZL;YACAM,MAAMN,IAAIM;YACVC,KAAKP,IAAIO;YACTJ,OAAO;gBAAE,GAAGA,KAAK;gBAAEC;YAAS;QAChC;QACA,OAAOC;IACX;AACJ;AAEA,MAAMG,SAASA,CAACC,aAA0BC;IACtC,IAAI;QAAC;QAAU;KAAS,CAACC,SAAS,OAAOF,cAAc;QACnDC,WAAWE,YAAYC,SAASC,eAAeL,aAAaM;QAC5D;IACJ;IAEA,MAAMC,mBAAmBH,SAASX,cAAcO,YAAYT;IAE5D,oCAAA;IACAiB,OAAOC,KAAKT,aAAaN,OACpBgB,OAAQZ,CAAAA,MAAQA,QAAQ,YACxBa,QAASC,CAAAA;QACNL,gBAAgB,CAACK,SAAS,GAAGZ,YAAYN,KAAK,CAACkB,SAAS;IAC5D;IAEJ,sCAAA;IACAZ,aAAaN,OAAOC,SAASgB,QAAQ,CAACE;QAClCd,OAAOc,OAAON;IAClB;IAEAN,WAAWE,YAAYI,mBAAmB,0GAA1CN;AACJ;AAEA,MAAMa,WAAWA;IACb,OACItB,cAAAC,cADJ,OAAA;QACS,UAAO;IAAqB,GAC7BD,cAAAC,cAD6B,OAAA;QACxBsB,IAAG;IAAS,GACbvB,cAAAC,cAAA,MAAA,MAAI,mBACJD,cAAAC,cAFa,SAAA;QAENI,MAAK;QAAOmB,aAAY;IAA0C;AAIzF;AAEAjB,OAAOe,YAA2BV,SAASa,cAAc","sources":["index.tsx"],"sourcesContent":["interface FrameworkEl extends JSX.Element {\n    tag: any;\n}\n\nconst MiniFramework = {\n    createElement: (tag, props, ...children): FrameworkEl => {\n        const element = {\n            tag,\n            type: tag.type,\n            key: tag.key,\n            props: { ...props, children },\n        };\n        return element;\n    },\n};\n\nconst render = (frameworkEl: FrameworkEl, container: Element | null) => {\n    if ([\"string\", \"number\"].includes(typeof frameworkEl)) {\n        container?.appendChild(document.createTextNode(frameworkEl?.toString()));\n        return;\n    }\n\n    const actualDOMElement = document.createElement(frameworkEl.tag);\n\n    // Apply Props to actual DOM Element\n    Object.keys(frameworkEl?.props)\n        .filter((key) => key !== \"children\")\n        .forEach((property) => {\n            actualDOMElement[property] = frameworkEl.props[property];\n        });\n\n    // Render children inside this element\n    frameworkEl?.props?.children.forEach((child: FrameworkEl) => {\n        render(child, actualDOMElement);\n    });\n\n    container?.appendChild(actualDOMElement); // Happens once, unless the DOM already exists and we just need to replace something on the child element.\n};\n\nconst myMarkup = () => {\n    return (\n        <div data-x=\"data attribute test\">\n            <div id=\"id-test\">\n                <h1>Mini Framework</h1>\n                <input type=\"text\" placeholder=\"Part 2: data binding & hooks coming soon\" />\n            </div>\n        </div>\n    );\n};\n\nrender(myMarkup() as FrameworkEl, document.querySelector(\"#app\"));\n"],"names":["FrameworkEl","JSX","Element","tag","MiniFramework","createElement","props","children","element","type","key","render","frameworkEl","container","includes","appendChild","document","createTextNode","toString","actualDOMElement","Object","keys","filter","forEach","property","child","myMarkup","id","placeholder","querySelector"],"version":3,"file":"index.ad9a7e97.js.map","sourceRoot":"/__parcel_source_root/"}